// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: Bpftrace.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BpftraceService_RunScript_FullMethodName     = "/bpftrace_pb.BpftraceService/RunScript"
	BpftraceService_DeleteScript_FullMethodName  = "/bpftrace_pb.BpftraceService/DeleteScript"
	BpftraceService_GetScriptList_FullMethodName = "/bpftrace_pb.BpftraceService/GetScriptList"
)

// BpftraceServiceClient is the client API for BpftraceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BpftraceServiceClient interface {
	RunScript(ctx context.Context, in *BpftraceFlags, opts ...grpc.CallOption) (*ResponseStatus, error)
	DeleteScript(ctx context.Context, in *BpftraceDeleteScript, opts ...grpc.CallOption) (*ResponseStatus, error)
	GetScriptList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BpftraceGetScriptList, error)
}

type bpftraceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBpftraceServiceClient(cc grpc.ClientConnInterface) BpftraceServiceClient {
	return &bpftraceServiceClient{cc}
}

func (c *bpftraceServiceClient) RunScript(ctx context.Context, in *BpftraceFlags, opts ...grpc.CallOption) (*ResponseStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, BpftraceService_RunScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpftraceServiceClient) DeleteScript(ctx context.Context, in *BpftraceDeleteScript, opts ...grpc.CallOption) (*ResponseStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, BpftraceService_DeleteScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpftraceServiceClient) GetScriptList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BpftraceGetScriptList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BpftraceGetScriptList)
	err := c.cc.Invoke(ctx, BpftraceService_GetScriptList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BpftraceServiceServer is the server API for BpftraceService service.
// All implementations must embed UnimplementedBpftraceServiceServer
// for forward compatibility.
type BpftraceServiceServer interface {
	RunScript(context.Context, *BpftraceFlags) (*ResponseStatus, error)
	DeleteScript(context.Context, *BpftraceDeleteScript) (*ResponseStatus, error)
	GetScriptList(context.Context, *emptypb.Empty) (*BpftraceGetScriptList, error)
	mustEmbedUnimplementedBpftraceServiceServer()
}

// UnimplementedBpftraceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBpftraceServiceServer struct{}

func (UnimplementedBpftraceServiceServer) RunScript(context.Context, *BpftraceFlags) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunScript not implemented")
}
func (UnimplementedBpftraceServiceServer) DeleteScript(context.Context, *BpftraceDeleteScript) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScript not implemented")
}
func (UnimplementedBpftraceServiceServer) GetScriptList(context.Context, *emptypb.Empty) (*BpftraceGetScriptList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptList not implemented")
}
func (UnimplementedBpftraceServiceServer) mustEmbedUnimplementedBpftraceServiceServer() {}
func (UnimplementedBpftraceServiceServer) testEmbeddedByValue()                         {}

// UnsafeBpftraceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BpftraceServiceServer will
// result in compilation errors.
type UnsafeBpftraceServiceServer interface {
	mustEmbedUnimplementedBpftraceServiceServer()
}

func RegisterBpftraceServiceServer(s grpc.ServiceRegistrar, srv BpftraceServiceServer) {
	// If the following call pancis, it indicates UnimplementedBpftraceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BpftraceService_ServiceDesc, srv)
}

func _BpftraceService_RunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BpftraceFlags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpftraceServiceServer).RunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BpftraceService_RunScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpftraceServiceServer).RunScript(ctx, req.(*BpftraceFlags))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpftraceService_DeleteScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BpftraceDeleteScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpftraceServiceServer).DeleteScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BpftraceService_DeleteScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpftraceServiceServer).DeleteScript(ctx, req.(*BpftraceDeleteScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpftraceService_GetScriptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpftraceServiceServer).GetScriptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BpftraceService_GetScriptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpftraceServiceServer).GetScriptList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BpftraceService_ServiceDesc is the grpc.ServiceDesc for BpftraceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BpftraceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bpftrace_pb.BpftraceService",
	HandlerType: (*BpftraceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunScript",
			Handler:    _BpftraceService_RunScript_Handler,
		},
		{
			MethodName: "DeleteScript",
			Handler:    _BpftraceService_DeleteScript_Handler,
		},
		{
			MethodName: "GetScriptList",
			Handler:    _BpftraceService_GetScriptList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Bpftrace.proto",
}
