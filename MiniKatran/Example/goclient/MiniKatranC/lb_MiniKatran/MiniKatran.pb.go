// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: MiniKatran.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_ADD Action = 0
	Action_DEL Action = 1
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ADD",
		1: "DEL",
	}
	Action_value = map[string]int32{
		"ADD": 0,
		"DEL": 1,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniKatran_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_MiniKatran_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_MiniKatran_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{0}
}

type Bool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bool) Reset() {
	*x = Bool{}
	mi := &file_MiniKatran_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{1}
}

func (x *Bool) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Vip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol      int32                  `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vip) Reset() {
	*x = Vip{}
	mi := &file_MiniKatran_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vip) ProtoMessage() {}

func (x *Vip) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vip.ProtoReflect.Descriptor instead.
func (*Vip) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{2}
}

func (x *Vip) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vip) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Vip) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

type VipMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vip           *Vip                   `protobuf:"bytes,1,opt,name=vip,proto3" json:"vip,omitempty"`
	Flags         int64                  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	SetFlag       bool                   `protobuf:"varint,3,opt,name=setFlag,proto3" json:"setFlag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VipMeta) Reset() {
	*x = VipMeta{}
	mi := &file_MiniKatran_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VipMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipMeta) ProtoMessage() {}

func (x *VipMeta) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipMeta.ProtoReflect.Descriptor instead.
func (*VipMeta) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{3}
}

func (x *VipMeta) GetVip() *Vip {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *VipMeta) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *VipMeta) GetSetFlag() bool {
	if x != nil {
		return x.SetFlag
	}
	return false
}

type RealMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Flags         int32                  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	SetFlag       bool                   `protobuf:"varint,3,opt,name=setFlag,proto3" json:"setFlag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealMeta) Reset() {
	*x = RealMeta{}
	mi := &file_MiniKatran_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealMeta) ProtoMessage() {}

func (x *RealMeta) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealMeta.ProtoReflect.Descriptor instead.
func (*RealMeta) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{4}
}

func (x *RealMeta) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RealMeta) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RealMeta) GetSetFlag() bool {
	if x != nil {
		return x.SetFlag
	}
	return false
}

type Real struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Weight        int32                  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Flags         int32                  `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Real) Reset() {
	*x = Real{}
	mi := &file_MiniKatran_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Real) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Real) ProtoMessage() {}

func (x *Real) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Real.ProtoReflect.Descriptor instead.
func (*Real) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{5}
}

func (x *Real) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Real) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Real) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type QuicReal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id            int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuicReal) Reset() {
	*x = QuicReal{}
	mi := &file_MiniKatran_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuicReal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuicReal) ProtoMessage() {}

func (x *QuicReal) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuicReal.ProtoReflect.Descriptor instead.
func (*QuicReal) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{6}
}

func (x *QuicReal) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *QuicReal) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Mac struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mac           string                 `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mac) Reset() {
	*x = Mac{}
	mi := &file_MiniKatran_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mac) ProtoMessage() {}

func (x *Mac) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mac.ProtoReflect.Descriptor instead.
func (*Mac) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{7}
}

func (x *Mac) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type Stats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	V1            uint64                 `protobuf:"varint,1,opt,name=v1,proto3" json:"v1,omitempty"`
	V2            uint64                 `protobuf:"varint,2,opt,name=v2,proto3" json:"v2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stats) Reset() {
	*x = Stats{}
	mi := &file_MiniKatran_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{8}
}

func (x *Stats) GetV1() uint64 {
	if x != nil {
		return x.V1
	}
	return 0
}

func (x *Stats) GetV2() uint64 {
	if x != nil {
		return x.V2
	}
	return 0
}

type Reals struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reals         []*Real                `protobuf:"bytes,1,rep,name=reals,proto3" json:"reals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reals) Reset() {
	*x = Reals{}
	mi := &file_MiniKatran_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reals) ProtoMessage() {}

func (x *Reals) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reals.ProtoReflect.Descriptor instead.
func (*Reals) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{9}
}

func (x *Reals) GetReals() []*Real {
	if x != nil {
		return x.Reals
	}
	return nil
}

type Vips struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vips          []*Vip                 `protobuf:"bytes,1,rep,name=vips,proto3" json:"vips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vips) Reset() {
	*x = Vips{}
	mi := &file_MiniKatran_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vips) ProtoMessage() {}

func (x *Vips) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vips.ProtoReflect.Descriptor instead.
func (*Vips) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{10}
}

func (x *Vips) GetVips() []*Vip {
	if x != nil {
		return x.Vips
	}
	return nil
}

type QuicReals struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Qreals        []*QuicReal            `protobuf:"bytes,1,rep,name=qreals,proto3" json:"qreals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuicReals) Reset() {
	*x = QuicReals{}
	mi := &file_MiniKatran_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuicReals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuicReals) ProtoMessage() {}

func (x *QuicReals) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuicReals.ProtoReflect.Descriptor instead.
func (*QuicReals) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{11}
}

func (x *QuicReals) GetQreals() []*QuicReal {
	if x != nil {
		return x.Qreals
	}
	return nil
}

type ModifiedRealsForVip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        Action                 `protobuf:"varint,1,opt,name=action,proto3,enum=lb_MiniKatran.Action" json:"action,omitempty"`
	Real          *Reals                 `protobuf:"bytes,2,opt,name=real,proto3" json:"real,omitempty"`
	Vip           *Vip                   `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifiedRealsForVip) Reset() {
	*x = ModifiedRealsForVip{}
	mi := &file_MiniKatran_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifiedRealsForVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifiedRealsForVip) ProtoMessage() {}

func (x *ModifiedRealsForVip) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifiedRealsForVip.ProtoReflect.Descriptor instead.
func (*ModifiedRealsForVip) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{12}
}

func (x *ModifiedRealsForVip) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ADD
}

func (x *ModifiedRealsForVip) GetReal() *Reals {
	if x != nil {
		return x.Real
	}
	return nil
}

func (x *ModifiedRealsForVip) GetVip() *Vip {
	if x != nil {
		return x.Vip
	}
	return nil
}

type ModifiedQuicReals struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        Action                 `protobuf:"varint,1,opt,name=action,proto3,enum=lb_MiniKatran.Action" json:"action,omitempty"`
	Reals         *QuicReals             `protobuf:"bytes,2,opt,name=reals,proto3" json:"reals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifiedQuicReals) Reset() {
	*x = ModifiedQuicReals{}
	mi := &file_MiniKatran_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifiedQuicReals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifiedQuicReals) ProtoMessage() {}

func (x *ModifiedQuicReals) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifiedQuicReals.ProtoReflect.Descriptor instead.
func (*ModifiedQuicReals) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{13}
}

func (x *ModifiedQuicReals) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ADD
}

func (x *ModifiedQuicReals) GetReals() *QuicReals {
	if x != nil {
		return x.Reals
	}
	return nil
}

type RealForVip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Real          *Real                  `protobuf:"bytes,1,opt,name=real,proto3" json:"real,omitempty"`
	Vip           *Vip                   `protobuf:"bytes,2,opt,name=vip,proto3" json:"vip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealForVip) Reset() {
	*x = RealForVip{}
	mi := &file_MiniKatran_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealForVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealForVip) ProtoMessage() {}

func (x *RealForVip) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealForVip.ProtoReflect.Descriptor instead.
func (*RealForVip) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{14}
}

func (x *RealForVip) GetReal() *Real {
	if x != nil {
		return x.Real
	}
	return nil
}

func (x *RealForVip) GetVip() *Vip {
	if x != nil {
		return x.Vip
	}
	return nil
}

type Flags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flags         uint64                 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flags) Reset() {
	*x = Flags{}
	mi := &file_MiniKatran_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flags) ProtoMessage() {}

func (x *Flags) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flags.ProtoReflect.Descriptor instead.
func (*Flags) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{15}
}

func (x *Flags) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type Somark struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Somark        uint32                 `protobuf:"varint,1,opt,name=somark,proto3" json:"somark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Somark) Reset() {
	*x = Somark{}
	mi := &file_MiniKatran_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Somark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Somark) ProtoMessage() {}

func (x *Somark) ProtoReflect() protoreflect.Message {
	mi := &file_MiniKatran_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Somark.ProtoReflect.Descriptor instead.
func (*Somark) Descriptor() ([]byte, []int) {
	return file_MiniKatran_proto_rawDescGZIP(), []int{16}
}

func (x *Somark) GetSomark() uint32 {
	if x != nil {
		return x.Somark
	}
	return 0
}

var File_MiniKatran_proto protoreflect.FileDescriptor

const file_MiniKatran_proto_rawDesc = "" +
	"\n" +
	"\x10MiniKatran.proto\x12\rlb_MiniKatran\"\a\n" +
	"\x05Empty\" \n" +
	"\x04Bool\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"O\n" +
	"\x03Vip\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1a\n" +
	"\bprotocol\x18\x03 \x01(\x05R\bprotocol\"_\n" +
	"\aVipMeta\x12$\n" +
	"\x03vip\x18\x01 \x01(\v2\x12.lb_MiniKatran.VipR\x03vip\x12\x14\n" +
	"\x05flags\x18\x02 \x01(\x03R\x05flags\x12\x18\n" +
	"\asetFlag\x18\x03 \x01(\bR\asetFlag\"T\n" +
	"\bRealMeta\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x14\n" +
	"\x05flags\x18\x02 \x01(\x05R\x05flags\x12\x18\n" +
	"\asetFlag\x18\x03 \x01(\bR\asetFlag\"N\n" +
	"\x04Real\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06weight\x18\x02 \x01(\x05R\x06weight\x12\x14\n" +
	"\x05flags\x18\x03 \x01(\x05R\x05flags\"4\n" +
	"\bQuicReal\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\x05R\x02id\"\x17\n" +
	"\x03Mac\x12\x10\n" +
	"\x03mac\x18\x01 \x01(\tR\x03mac\"'\n" +
	"\x05Stats\x12\x0e\n" +
	"\x02v1\x18\x01 \x01(\x04R\x02v1\x12\x0e\n" +
	"\x02v2\x18\x02 \x01(\x04R\x02v2\"2\n" +
	"\x05Reals\x12)\n" +
	"\x05reals\x18\x01 \x03(\v2\x13.lb_MiniKatran.RealR\x05reals\".\n" +
	"\x04Vips\x12&\n" +
	"\x04vips\x18\x01 \x03(\v2\x12.lb_MiniKatran.VipR\x04vips\"<\n" +
	"\tQuicReals\x12/\n" +
	"\x06qreals\x18\x01 \x03(\v2\x17.lb_MiniKatran.QuicRealR\x06qreals\"\x94\x01\n" +
	"\x13modifiedRealsForVip\x12-\n" +
	"\x06action\x18\x01 \x01(\x0e2\x15.lb_MiniKatran.ActionR\x06action\x12(\n" +
	"\x04real\x18\x02 \x01(\v2\x14.lb_MiniKatran.RealsR\x04real\x12$\n" +
	"\x03vip\x18\x03 \x01(\v2\x12.lb_MiniKatran.VipR\x03vip\"r\n" +
	"\x11modifiedQuicReals\x12-\n" +
	"\x06action\x18\x01 \x01(\x0e2\x15.lb_MiniKatran.ActionR\x06action\x12.\n" +
	"\x05reals\x18\x02 \x01(\v2\x18.lb_MiniKatran.QuicRealsR\x05reals\"[\n" +
	"\n" +
	"realForVip\x12'\n" +
	"\x04real\x18\x01 \x01(\v2\x13.lb_MiniKatran.RealR\x04real\x12$\n" +
	"\x03vip\x18\x02 \x01(\v2\x12.lb_MiniKatran.VipR\x03vip\"\x1d\n" +
	"\x05Flags\x12\x14\n" +
	"\x05flags\x18\x01 \x01(\x04R\x05flags\" \n" +
	"\x06Somark\x12\x16\n" +
	"\x06somark\x18\x01 \x01(\rR\x06somark*\x1a\n" +
	"\x06Action\x12\a\n" +
	"\x03ADD\x10\x00\x12\a\n" +
	"\x03DEL\x10\x012\xe9\t\n" +
	"\x11MiniKatranService\x124\n" +
	"\tchangeMac\x12\x12.lb_MiniKatran.Mac\x1a\x13.lb_MiniKatran.Bool\x122\n" +
	"\x06getMac\x12\x14.lb_MiniKatran.Empty\x1a\x12.lb_MiniKatran.Mac\x125\n" +
	"\x06addVip\x12\x16.lb_MiniKatran.VipMeta\x1a\x13.lb_MiniKatran.Bool\x121\n" +
	"\x06delVip\x12\x12.lb_MiniKatran.Vip\x1a\x13.lb_MiniKatran.Bool\x127\n" +
	"\n" +
	"getAllVips\x12\x14.lb_MiniKatran.Empty\x1a\x13.lb_MiniKatran.Vips\x128\n" +
	"\tmodifyVip\x12\x16.lb_MiniKatran.VipMeta\x1a\x13.lb_MiniKatran.Bool\x12:\n" +
	"\n" +
	"modifyReal\x12\x17.lb_MiniKatran.RealMeta\x1a\x13.lb_MiniKatran.Bool\x127\n" +
	"\vgetVipFlags\x12\x12.lb_MiniKatran.Vip\x1a\x14.lb_MiniKatran.Flags\x129\n" +
	"\fgetRealFlags\x12\x13.lb_MiniKatran.Real\x1a\x14.lb_MiniKatran.Flags\x12?\n" +
	"\raddRealForVip\x12\x19.lb_MiniKatran.realForVip\x1a\x13.lb_MiniKatran.Bool\x12?\n" +
	"\rdelRealForVip\x12\x19.lb_MiniKatran.realForVip\x1a\x13.lb_MiniKatran.Bool\x12L\n" +
	"\x11modifyRealsForVip\x12\".lb_MiniKatran.modifiedRealsForVip\x1a\x13.lb_MiniKatran.Bool\x12:\n" +
	"\x0egetRealsForVip\x12\x12.lb_MiniKatran.Vip\x1a\x14.lb_MiniKatran.Reals\x12O\n" +
	"\x16modifyQuicRealsMapping\x12 .lb_MiniKatran.modifiedQuicReals\x1a\x13.lb_MiniKatran.Bool\x12E\n" +
	"\x13getQuicRealsMapping\x12\x14.lb_MiniKatran.Empty\x1a\x18.lb_MiniKatran.QuicReals\x12:\n" +
	"\x0egetStatsForVip\x12\x12.lb_MiniKatran.Vip\x1a\x14.lb_MiniKatran.Stats\x129\n" +
	"\vgetLruStats\x12\x14.lb_MiniKatran.Empty\x1a\x14.lb_MiniKatran.Stats\x12=\n" +
	"\x0fgetLruMissStats\x12\x14.lb_MiniKatran.Empty\x1a\x14.lb_MiniKatran.Stats\x12A\n" +
	"\x13getLruFallbackStats\x12\x14.lb_MiniKatran.Empty\x1a\x14.lb_MiniKatran.Stats\x12@\n" +
	"\x12getIcmpTooBigStats\x12\x14.lb_MiniKatran.Empty\x1a\x14.lb_MiniKatran.StatsB\vZ\t./;protosb\x06proto3"

var (
	file_MiniKatran_proto_rawDescOnce sync.Once
	file_MiniKatran_proto_rawDescData []byte
)

func file_MiniKatran_proto_rawDescGZIP() []byte {
	file_MiniKatran_proto_rawDescOnce.Do(func() {
		file_MiniKatran_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_MiniKatran_proto_rawDesc), len(file_MiniKatran_proto_rawDesc)))
	})
	return file_MiniKatran_proto_rawDescData
}

var file_MiniKatran_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_MiniKatran_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_MiniKatran_proto_goTypes = []any{
	(Action)(0),                 // 0: lb_MiniKatran.Action
	(*Empty)(nil),               // 1: lb_MiniKatran.Empty
	(*Bool)(nil),                // 2: lb_MiniKatran.Bool
	(*Vip)(nil),                 // 3: lb_MiniKatran.Vip
	(*VipMeta)(nil),             // 4: lb_MiniKatran.VipMeta
	(*RealMeta)(nil),            // 5: lb_MiniKatran.RealMeta
	(*Real)(nil),                // 6: lb_MiniKatran.Real
	(*QuicReal)(nil),            // 7: lb_MiniKatran.QuicReal
	(*Mac)(nil),                 // 8: lb_MiniKatran.Mac
	(*Stats)(nil),               // 9: lb_MiniKatran.Stats
	(*Reals)(nil),               // 10: lb_MiniKatran.Reals
	(*Vips)(nil),                // 11: lb_MiniKatran.Vips
	(*QuicReals)(nil),           // 12: lb_MiniKatran.QuicReals
	(*ModifiedRealsForVip)(nil), // 13: lb_MiniKatran.modifiedRealsForVip
	(*ModifiedQuicReals)(nil),   // 14: lb_MiniKatran.modifiedQuicReals
	(*RealForVip)(nil),          // 15: lb_MiniKatran.realForVip
	(*Flags)(nil),               // 16: lb_MiniKatran.Flags
	(*Somark)(nil),              // 17: lb_MiniKatran.Somark
}
var file_MiniKatran_proto_depIdxs = []int32{
	3,  // 0: lb_MiniKatran.VipMeta.vip:type_name -> lb_MiniKatran.Vip
	6,  // 1: lb_MiniKatran.Reals.reals:type_name -> lb_MiniKatran.Real
	3,  // 2: lb_MiniKatran.Vips.vips:type_name -> lb_MiniKatran.Vip
	7,  // 3: lb_MiniKatran.QuicReals.qreals:type_name -> lb_MiniKatran.QuicReal
	0,  // 4: lb_MiniKatran.modifiedRealsForVip.action:type_name -> lb_MiniKatran.Action
	10, // 5: lb_MiniKatran.modifiedRealsForVip.real:type_name -> lb_MiniKatran.Reals
	3,  // 6: lb_MiniKatran.modifiedRealsForVip.vip:type_name -> lb_MiniKatran.Vip
	0,  // 7: lb_MiniKatran.modifiedQuicReals.action:type_name -> lb_MiniKatran.Action
	12, // 8: lb_MiniKatran.modifiedQuicReals.reals:type_name -> lb_MiniKatran.QuicReals
	6,  // 9: lb_MiniKatran.realForVip.real:type_name -> lb_MiniKatran.Real
	3,  // 10: lb_MiniKatran.realForVip.vip:type_name -> lb_MiniKatran.Vip
	8,  // 11: lb_MiniKatran.MiniKatranService.changeMac:input_type -> lb_MiniKatran.Mac
	1,  // 12: lb_MiniKatran.MiniKatranService.getMac:input_type -> lb_MiniKatran.Empty
	4,  // 13: lb_MiniKatran.MiniKatranService.addVip:input_type -> lb_MiniKatran.VipMeta
	3,  // 14: lb_MiniKatran.MiniKatranService.delVip:input_type -> lb_MiniKatran.Vip
	1,  // 15: lb_MiniKatran.MiniKatranService.getAllVips:input_type -> lb_MiniKatran.Empty
	4,  // 16: lb_MiniKatran.MiniKatranService.modifyVip:input_type -> lb_MiniKatran.VipMeta
	5,  // 17: lb_MiniKatran.MiniKatranService.modifyReal:input_type -> lb_MiniKatran.RealMeta
	3,  // 18: lb_MiniKatran.MiniKatranService.getVipFlags:input_type -> lb_MiniKatran.Vip
	6,  // 19: lb_MiniKatran.MiniKatranService.getRealFlags:input_type -> lb_MiniKatran.Real
	15, // 20: lb_MiniKatran.MiniKatranService.addRealForVip:input_type -> lb_MiniKatran.realForVip
	15, // 21: lb_MiniKatran.MiniKatranService.delRealForVip:input_type -> lb_MiniKatran.realForVip
	13, // 22: lb_MiniKatran.MiniKatranService.modifyRealsForVip:input_type -> lb_MiniKatran.modifiedRealsForVip
	3,  // 23: lb_MiniKatran.MiniKatranService.getRealsForVip:input_type -> lb_MiniKatran.Vip
	14, // 24: lb_MiniKatran.MiniKatranService.modifyQuicRealsMapping:input_type -> lb_MiniKatran.modifiedQuicReals
	1,  // 25: lb_MiniKatran.MiniKatranService.getQuicRealsMapping:input_type -> lb_MiniKatran.Empty
	3,  // 26: lb_MiniKatran.MiniKatranService.getStatsForVip:input_type -> lb_MiniKatran.Vip
	1,  // 27: lb_MiniKatran.MiniKatranService.getLruStats:input_type -> lb_MiniKatran.Empty
	1,  // 28: lb_MiniKatran.MiniKatranService.getLruMissStats:input_type -> lb_MiniKatran.Empty
	1,  // 29: lb_MiniKatran.MiniKatranService.getLruFallbackStats:input_type -> lb_MiniKatran.Empty
	1,  // 30: lb_MiniKatran.MiniKatranService.getIcmpTooBigStats:input_type -> lb_MiniKatran.Empty
	2,  // 31: lb_MiniKatran.MiniKatranService.changeMac:output_type -> lb_MiniKatran.Bool
	8,  // 32: lb_MiniKatran.MiniKatranService.getMac:output_type -> lb_MiniKatran.Mac
	2,  // 33: lb_MiniKatran.MiniKatranService.addVip:output_type -> lb_MiniKatran.Bool
	2,  // 34: lb_MiniKatran.MiniKatranService.delVip:output_type -> lb_MiniKatran.Bool
	11, // 35: lb_MiniKatran.MiniKatranService.getAllVips:output_type -> lb_MiniKatran.Vips
	2,  // 36: lb_MiniKatran.MiniKatranService.modifyVip:output_type -> lb_MiniKatran.Bool
	2,  // 37: lb_MiniKatran.MiniKatranService.modifyReal:output_type -> lb_MiniKatran.Bool
	16, // 38: lb_MiniKatran.MiniKatranService.getVipFlags:output_type -> lb_MiniKatran.Flags
	16, // 39: lb_MiniKatran.MiniKatranService.getRealFlags:output_type -> lb_MiniKatran.Flags
	2,  // 40: lb_MiniKatran.MiniKatranService.addRealForVip:output_type -> lb_MiniKatran.Bool
	2,  // 41: lb_MiniKatran.MiniKatranService.delRealForVip:output_type -> lb_MiniKatran.Bool
	2,  // 42: lb_MiniKatran.MiniKatranService.modifyRealsForVip:output_type -> lb_MiniKatran.Bool
	10, // 43: lb_MiniKatran.MiniKatranService.getRealsForVip:output_type -> lb_MiniKatran.Reals
	2,  // 44: lb_MiniKatran.MiniKatranService.modifyQuicRealsMapping:output_type -> lb_MiniKatran.Bool
	12, // 45: lb_MiniKatran.MiniKatranService.getQuicRealsMapping:output_type -> lb_MiniKatran.QuicReals
	9,  // 46: lb_MiniKatran.MiniKatranService.getStatsForVip:output_type -> lb_MiniKatran.Stats
	9,  // 47: lb_MiniKatran.MiniKatranService.getLruStats:output_type -> lb_MiniKatran.Stats
	9,  // 48: lb_MiniKatran.MiniKatranService.getLruMissStats:output_type -> lb_MiniKatran.Stats
	9,  // 49: lb_MiniKatran.MiniKatranService.getLruFallbackStats:output_type -> lb_MiniKatran.Stats
	9,  // 50: lb_MiniKatran.MiniKatranService.getIcmpTooBigStats:output_type -> lb_MiniKatran.Stats
	31, // [31:51] is the sub-list for method output_type
	11, // [11:31] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_MiniKatran_proto_init() }
func file_MiniKatran_proto_init() {
	if File_MiniKatran_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_MiniKatran_proto_rawDesc), len(file_MiniKatran_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_MiniKatran_proto_goTypes,
		DependencyIndexes: file_MiniKatran_proto_depIdxs,
		EnumInfos:         file_MiniKatran_proto_enumTypes,
		MessageInfos:      file_MiniKatran_proto_msgTypes,
	}.Build()
	File_MiniKatran_proto = out.File
	file_MiniKatran_proto_goTypes = nil
	file_MiniKatran_proto_depIdxs = nil
}
