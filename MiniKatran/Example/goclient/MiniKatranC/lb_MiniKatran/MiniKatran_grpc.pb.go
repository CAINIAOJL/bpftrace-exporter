// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: MiniKatran.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MiniKatranService_ChangeMac_FullMethodName              = "/lb_MiniKatran.MiniKatranService/changeMac"
	MiniKatranService_GetMac_FullMethodName                 = "/lb_MiniKatran.MiniKatranService/getMac"
	MiniKatranService_AddVip_FullMethodName                 = "/lb_MiniKatran.MiniKatranService/addVip"
	MiniKatranService_DelVip_FullMethodName                 = "/lb_MiniKatran.MiniKatranService/delVip"
	MiniKatranService_GetAllVips_FullMethodName             = "/lb_MiniKatran.MiniKatranService/getAllVips"
	MiniKatranService_ModifyVip_FullMethodName              = "/lb_MiniKatran.MiniKatranService/modifyVip"
	MiniKatranService_ModifyReal_FullMethodName             = "/lb_MiniKatran.MiniKatranService/modifyReal"
	MiniKatranService_GetVipFlags_FullMethodName            = "/lb_MiniKatran.MiniKatranService/getVipFlags"
	MiniKatranService_GetRealFlags_FullMethodName           = "/lb_MiniKatran.MiniKatranService/getRealFlags"
	MiniKatranService_AddRealForVip_FullMethodName          = "/lb_MiniKatran.MiniKatranService/addRealForVip"
	MiniKatranService_DelRealForVip_FullMethodName          = "/lb_MiniKatran.MiniKatranService/delRealForVip"
	MiniKatranService_ModifyRealsForVip_FullMethodName      = "/lb_MiniKatran.MiniKatranService/modifyRealsForVip"
	MiniKatranService_GetRealsForVip_FullMethodName         = "/lb_MiniKatran.MiniKatranService/getRealsForVip"
	MiniKatranService_ModifyQuicRealsMapping_FullMethodName = "/lb_MiniKatran.MiniKatranService/modifyQuicRealsMapping"
	MiniKatranService_GetQuicRealsMapping_FullMethodName    = "/lb_MiniKatran.MiniKatranService/getQuicRealsMapping"
	MiniKatranService_GetStatsForVip_FullMethodName         = "/lb_MiniKatran.MiniKatranService/getStatsForVip"
	MiniKatranService_GetLruStats_FullMethodName            = "/lb_MiniKatran.MiniKatranService/getLruStats"
	MiniKatranService_GetLruMissStats_FullMethodName        = "/lb_MiniKatran.MiniKatranService/getLruMissStats"
	MiniKatranService_GetLruFallbackStats_FullMethodName    = "/lb_MiniKatran.MiniKatranService/getLruFallbackStats"
	MiniKatranService_GetIcmpTooBigStats_FullMethodName     = "/lb_MiniKatran.MiniKatranService/getIcmpTooBigStats"
)

// MiniKatranServiceClient is the client API for MiniKatranService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiniKatranServiceClient interface {
	ChangeMac(ctx context.Context, in *Mac, opts ...grpc.CallOption) (*Bool, error)
	GetMac(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Mac, error)
	AddVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error)
	DelVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Bool, error)
	GetAllVips(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vips, error)
	ModifyVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error)
	ModifyReal(ctx context.Context, in *RealMeta, opts ...grpc.CallOption) (*Bool, error)
	GetVipFlags(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Flags, error)
	GetRealFlags(ctx context.Context, in *Real, opts ...grpc.CallOption) (*Flags, error)
	AddRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error)
	DelRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error)
	ModifyRealsForVip(ctx context.Context, in *ModifiedRealsForVip, opts ...grpc.CallOption) (*Bool, error)
	GetRealsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Reals, error)
	ModifyQuicRealsMapping(ctx context.Context, in *ModifiedQuicReals, opts ...grpc.CallOption) (*Bool, error)
	GetQuicRealsMapping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QuicReals, error)
	GetStatsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Stats, error)
	GetLruStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetLruMissStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetLruFallbackStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetIcmpTooBigStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
}

type miniKatranServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniKatranServiceClient(cc grpc.ClientConnInterface) MiniKatranServiceClient {
	return &miniKatranServiceClient{cc}
}

func (c *miniKatranServiceClient) ChangeMac(ctx context.Context, in *Mac, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_ChangeMac_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetMac(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Mac, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Mac)
	err := c.cc.Invoke(ctx, MiniKatranService_GetMac_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) AddVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_AddVip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) DelVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_DelVip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetAllVips(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vips, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vips)
	err := c.cc.Invoke(ctx, MiniKatranService_GetAllVips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) ModifyVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_ModifyVip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) ModifyReal(ctx context.Context, in *RealMeta, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_ModifyReal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetVipFlags(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Flags, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flags)
	err := c.cc.Invoke(ctx, MiniKatranService_GetVipFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetRealFlags(ctx context.Context, in *Real, opts ...grpc.CallOption) (*Flags, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flags)
	err := c.cc.Invoke(ctx, MiniKatranService_GetRealFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) AddRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_AddRealForVip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) DelRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_DelRealForVip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) ModifyRealsForVip(ctx context.Context, in *ModifiedRealsForVip, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_ModifyRealsForVip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetRealsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Reals, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reals)
	err := c.cc.Invoke(ctx, MiniKatranService_GetRealsForVip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) ModifyQuicRealsMapping(ctx context.Context, in *ModifiedQuicReals, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MiniKatranService_ModifyQuicRealsMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetQuicRealsMapping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QuicReals, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuicReals)
	err := c.cc.Invoke(ctx, MiniKatranService_GetQuicRealsMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetStatsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Stats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats)
	err := c.cc.Invoke(ctx, MiniKatranService_GetStatsForVip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetLruStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats)
	err := c.cc.Invoke(ctx, MiniKatranService_GetLruStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetLruMissStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats)
	err := c.cc.Invoke(ctx, MiniKatranService_GetLruMissStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetLruFallbackStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats)
	err := c.cc.Invoke(ctx, MiniKatranService_GetLruFallbackStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniKatranServiceClient) GetIcmpTooBigStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats)
	err := c.cc.Invoke(ctx, MiniKatranService_GetIcmpTooBigStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiniKatranServiceServer is the server API for MiniKatranService service.
// All implementations must embed UnimplementedMiniKatranServiceServer
// for forward compatibility.
type MiniKatranServiceServer interface {
	ChangeMac(context.Context, *Mac) (*Bool, error)
	GetMac(context.Context, *Empty) (*Mac, error)
	AddVip(context.Context, *VipMeta) (*Bool, error)
	DelVip(context.Context, *Vip) (*Bool, error)
	GetAllVips(context.Context, *Empty) (*Vips, error)
	ModifyVip(context.Context, *VipMeta) (*Bool, error)
	ModifyReal(context.Context, *RealMeta) (*Bool, error)
	GetVipFlags(context.Context, *Vip) (*Flags, error)
	GetRealFlags(context.Context, *Real) (*Flags, error)
	AddRealForVip(context.Context, *RealForVip) (*Bool, error)
	DelRealForVip(context.Context, *RealForVip) (*Bool, error)
	ModifyRealsForVip(context.Context, *ModifiedRealsForVip) (*Bool, error)
	GetRealsForVip(context.Context, *Vip) (*Reals, error)
	ModifyQuicRealsMapping(context.Context, *ModifiedQuicReals) (*Bool, error)
	GetQuicRealsMapping(context.Context, *Empty) (*QuicReals, error)
	GetStatsForVip(context.Context, *Vip) (*Stats, error)
	GetLruStats(context.Context, *Empty) (*Stats, error)
	GetLruMissStats(context.Context, *Empty) (*Stats, error)
	GetLruFallbackStats(context.Context, *Empty) (*Stats, error)
	GetIcmpTooBigStats(context.Context, *Empty) (*Stats, error)
	mustEmbedUnimplementedMiniKatranServiceServer()
}

// UnimplementedMiniKatranServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMiniKatranServiceServer struct{}

func (UnimplementedMiniKatranServiceServer) ChangeMac(context.Context, *Mac) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMac not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetMac(context.Context, *Empty) (*Mac, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMac not implemented")
}
func (UnimplementedMiniKatranServiceServer) AddVip(context.Context, *VipMeta) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVip not implemented")
}
func (UnimplementedMiniKatranServiceServer) DelVip(context.Context, *Vip) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVip not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetAllVips(context.Context, *Empty) (*Vips, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVips not implemented")
}
func (UnimplementedMiniKatranServiceServer) ModifyVip(context.Context, *VipMeta) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyVip not implemented")
}
func (UnimplementedMiniKatranServiceServer) ModifyReal(context.Context, *RealMeta) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyReal not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetVipFlags(context.Context, *Vip) (*Flags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipFlags not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetRealFlags(context.Context, *Real) (*Flags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealFlags not implemented")
}
func (UnimplementedMiniKatranServiceServer) AddRealForVip(context.Context, *RealForVip) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRealForVip not implemented")
}
func (UnimplementedMiniKatranServiceServer) DelRealForVip(context.Context, *RealForVip) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRealForVip not implemented")
}
func (UnimplementedMiniKatranServiceServer) ModifyRealsForVip(context.Context, *ModifiedRealsForVip) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRealsForVip not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetRealsForVip(context.Context, *Vip) (*Reals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealsForVip not implemented")
}
func (UnimplementedMiniKatranServiceServer) ModifyQuicRealsMapping(context.Context, *ModifiedQuicReals) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyQuicRealsMapping not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetQuicRealsMapping(context.Context, *Empty) (*QuicReals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuicRealsMapping not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetStatsForVip(context.Context, *Vip) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsForVip not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetLruStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLruStats not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetLruMissStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLruMissStats not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetLruFallbackStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLruFallbackStats not implemented")
}
func (UnimplementedMiniKatranServiceServer) GetIcmpTooBigStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIcmpTooBigStats not implemented")
}
func (UnimplementedMiniKatranServiceServer) mustEmbedUnimplementedMiniKatranServiceServer() {}
func (UnimplementedMiniKatranServiceServer) testEmbeddedByValue()                           {}

// UnsafeMiniKatranServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniKatranServiceServer will
// result in compilation errors.
type UnsafeMiniKatranServiceServer interface {
	mustEmbedUnimplementedMiniKatranServiceServer()
}

func RegisterMiniKatranServiceServer(s grpc.ServiceRegistrar, srv MiniKatranServiceServer) {
	// If the following call pancis, it indicates UnimplementedMiniKatranServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MiniKatranService_ServiceDesc, srv)
}

func _MiniKatranService_ChangeMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mac)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).ChangeMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_ChangeMac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).ChangeMac(ctx, req.(*Mac))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetMac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetMac(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_AddVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).AddVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_AddVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).AddVip(ctx, req.(*VipMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_DelVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).DelVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_DelVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).DelVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetAllVips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetAllVips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetAllVips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetAllVips(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_ModifyVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).ModifyVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_ModifyVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).ModifyVip(ctx, req.(*VipMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_ModifyReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).ModifyReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_ModifyReal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).ModifyReal(ctx, req.(*RealMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetVipFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetVipFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetVipFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetVipFlags(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetRealFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Real)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetRealFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetRealFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetRealFlags(ctx, req.(*Real))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_AddRealForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).AddRealForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_AddRealForVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).AddRealForVip(ctx, req.(*RealForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_DelRealForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).DelRealForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_DelRealForVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).DelRealForVip(ctx, req.(*RealForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_ModifyRealsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifiedRealsForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).ModifyRealsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_ModifyRealsForVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).ModifyRealsForVip(ctx, req.(*ModifiedRealsForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetRealsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetRealsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetRealsForVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetRealsForVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_ModifyQuicRealsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifiedQuicReals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).ModifyQuicRealsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_ModifyQuicRealsMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).ModifyQuicRealsMapping(ctx, req.(*ModifiedQuicReals))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetQuicRealsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetQuicRealsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetQuicRealsMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetQuicRealsMapping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetStatsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetStatsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetStatsForVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetStatsForVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetLruStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetLruStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetLruStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetLruStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetLruMissStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetLruMissStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetLruMissStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetLruMissStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetLruFallbackStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetLruFallbackStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetLruFallbackStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetLruFallbackStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniKatranService_GetIcmpTooBigStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniKatranServiceServer).GetIcmpTooBigStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniKatranService_GetIcmpTooBigStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniKatranServiceServer).GetIcmpTooBigStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MiniKatranService_ServiceDesc is the grpc.ServiceDesc for MiniKatranService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiniKatranService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lb_MiniKatran.MiniKatranService",
	HandlerType: (*MiniKatranServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "changeMac",
			Handler:    _MiniKatranService_ChangeMac_Handler,
		},
		{
			MethodName: "getMac",
			Handler:    _MiniKatranService_GetMac_Handler,
		},
		{
			MethodName: "addVip",
			Handler:    _MiniKatranService_AddVip_Handler,
		},
		{
			MethodName: "delVip",
			Handler:    _MiniKatranService_DelVip_Handler,
		},
		{
			MethodName: "getAllVips",
			Handler:    _MiniKatranService_GetAllVips_Handler,
		},
		{
			MethodName: "modifyVip",
			Handler:    _MiniKatranService_ModifyVip_Handler,
		},
		{
			MethodName: "modifyReal",
			Handler:    _MiniKatranService_ModifyReal_Handler,
		},
		{
			MethodName: "getVipFlags",
			Handler:    _MiniKatranService_GetVipFlags_Handler,
		},
		{
			MethodName: "getRealFlags",
			Handler:    _MiniKatranService_GetRealFlags_Handler,
		},
		{
			MethodName: "addRealForVip",
			Handler:    _MiniKatranService_AddRealForVip_Handler,
		},
		{
			MethodName: "delRealForVip",
			Handler:    _MiniKatranService_DelRealForVip_Handler,
		},
		{
			MethodName: "modifyRealsForVip",
			Handler:    _MiniKatranService_ModifyRealsForVip_Handler,
		},
		{
			MethodName: "getRealsForVip",
			Handler:    _MiniKatranService_GetRealsForVip_Handler,
		},
		{
			MethodName: "modifyQuicRealsMapping",
			Handler:    _MiniKatranService_ModifyQuicRealsMapping_Handler,
		},
		{
			MethodName: "getQuicRealsMapping",
			Handler:    _MiniKatranService_GetQuicRealsMapping_Handler,
		},
		{
			MethodName: "getStatsForVip",
			Handler:    _MiniKatranService_GetStatsForVip_Handler,
		},
		{
			MethodName: "getLruStats",
			Handler:    _MiniKatranService_GetLruStats_Handler,
		},
		{
			MethodName: "getLruMissStats",
			Handler:    _MiniKatranService_GetLruMissStats_Handler,
		},
		{
			MethodName: "getLruFallbackStats",
			Handler:    _MiniKatranService_GetLruFallbackStats_Handler,
		},
		{
			MethodName: "getIcmpTooBigStats",
			Handler:    _MiniKatranService_GetIcmpTooBigStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MiniKatran.proto",
}
